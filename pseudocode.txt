Class Graph:
    Method add_edge(u, v):
        # Add an edge to the graph

    Method find_paths(length):
        # Find all possible paths in the graph

    Method remove_last_if_equal(paths):
        # Remove nodes if the last node is equal to the first

Function read_adjacency_matrix_from_file(file_path):
    # Read adjacency matrix data from a file

Function search(new_node, modified_nodes):
    # Perform depth-first search to find all possible paths

Function construct_tree(paths):
    # Construct a multiway tree based on the paths

Function print_paths(tree, path=[]):
    # Print the paths in the tree structure

# Read adjacency matrix data from a file
adj_matrix = read_adjacency_matrix_from_file("./adjacency_matrix.txt")

# Create an empty directed graph object
g = Graph()

# Add edges to the directed graph based on the adjacency matrix
for i in range(len(adj_matrix)):
    for j in range(len(adj_matrix[i])):
        if adj_matrix[i][j] == 1:
            g.add_edge(i, j)

# Find all possible paths in the graph
nodes = g.find_nodes(len(adj_matrix))
modified_nodes = g.remove_last_if_equal(nodes)

# Initialize an empty list to store the paths
path_list = []

# Perform a search for each node to find all paths
for node in modified_nodes:
    if node[0] is None:
        search(node, modified_nodes)

# Construct a tree based on the paths
tree = construct_tree(path_list)

# Print the paths in the tree structure
print_paths(tree)
